import Website.Skeleton (skeleton)
import JavaScript as JS

title = constant (JS.fromString "Library Design Guidelines")
foreign export jsevent "title"
  title : Signal JS.JSString

main = skeleton [] scene (constant ())

scene _ () w =
    let words' = width (min w 800) words in
    container w (heightOf words') middle words'

words = [markdown|
<style>
pre {
  background-color: white;
  padding: 10px;
  border: 1px solid rgb(216, 221, 225);
  border-radius: 4px;
}
li { padding: 2px; }
</style>

# Library Design Guidelines

These guidelines are meant to promote consistency and quality across all
Noelm libraries. It is a collection of best practices that will help you
write better libraries and your users write better code with your library.
Here is the overview, but it is important to read through and see why
these recommendations matter.

  * Design for a concrete use case
  * [Avoid gratuitous abstraction](#avoid-gratuitous-abstraction)
  * Use semantic versioning
  * [Write helpful documentation with examples](#write-helpful-documentation-with-examples)
  * [The data you are manipulating is always the last argument](#the-data-you-are-manipulating-is-always-the-last-argument)
  * [Naming](#naming)
    - [Use human readable names](#use-human-readable-names)
    - [Module names should not reappear in function names](#module-names-should-not-reappear-in-function-names)
    - [Avoid infix operators](#avoid-infix-operators)

## Avoid gratuitous abstraction

Some functional programmers like to make their API as general as possible.
This will reliably make your API harder to understand. Is that worth it?
What concrete benefits are users gaining? Does that align with the concrete
use case you have in mind for your library?

Abstraction is a tool, not a design goal. Unless abstraction is
making someones life easier, it is not usefull. If you cannot
*demonstrate* why your abstraction is helpful, it is a problem with your API.

## Write helpful documentation with examples

[This document](/Documentation.html) describes how documentation works in Noelm.

Providing examples of common uses is extremely helpful. Do it! The standard
libraries all make a point to have examples that show how one *should* be using
those functions.

Also, make the documentation for the library itself helpful. Perhaps have an
example that shows how to use many functions together, showcasing the API.

Finally, think hard about the order that the functions appear in and what kind
of title each section gets. People will read documentation linearly when learning
a library so give them some structure!

## The data you are manipulating is always the last argument

Function composition works better when the data you are manipulating is the last argument:

```
getCombinedHeight = foldl (+) 0 . map .height
```

Folding also works better when the data structure is the last argument.
`foldl`, `foldr`, and `foldp` use an accumulator function where the
data structure is the last argument:

```haskell
-- Good API
lookup : String -> Dict String a -> Maybe a
selectedPeople = foldr lookup people ["Steve","Tom","Sally"]

-- Bad API
lookup : Dict String a -> String -> Maybe a
selectedPeople = foldr (flip lookup) people ["Steve","Tom","Sally"]
```

The order of arguments in fold is specifically intended to make this very
straight-forward.

## Naming

#### Use human readable names

Abbreviations are generally a silly idea for an API. Having an API
that is clear is more important than saving three or four characters
by dropping letters from a name.

Infix operators are not a substitute for human readable names.

#### Module names should not reappear in function names

A function called `State.runState` is redundant and silly. More importantly,
it encourages people to use `import open State` which does not scale well.
In files with many `open` dependencies, it is essentially impossible to
figure out where functions are coming from. This can make large code
bases impossible to understand, especially if custom infix operators are
used as well. Repeating the module name actively encourages this kind of
unreadable code.

With a name like `State.run` the user is encouraged to disambiguate functions
with namespacing, leading to a codebase that will be clearer to people reading
the project for the first time.

#### Avoid infix operators

They should never take the place of a well-named human readable
function. In a large code base that is maintained by many people,
infix operators are typically a bad idea.

  * They usually offer no insight into what they actually do. To the uninitiated,
    things like `(<*>)` and `(!?)` are meaningless.

Now lets assume you have a really great infix operator, an operator that actually
represents its meaning in a very direct way, like `(<~)`. In this case, it is fine
to use it, but make sure you limit your infixes to no more than two or three really
core really common functions.
|]
